using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace LIS.DAL
{
    /// <summary>
    /// Controller class for D_DEVICE_DATATYPE
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class DDeviceDatatypeController
    {
        // Preload our schema..
        DDeviceDatatype thisSchemaLoad = new DDeviceDatatype();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public DDeviceDatatypeCollection FetchAll()
        {
            DDeviceDatatypeCollection coll = new DDeviceDatatypeCollection();
            Query qry = new Query(DDeviceDatatype.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public DDeviceDatatypeCollection FetchByID(object DataTypeId)
        {
            DDeviceDatatypeCollection coll = new DDeviceDatatypeCollection().Where("DataType_ID", DataTypeId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public DDeviceDatatypeCollection FetchByQuery(Query qry)
        {
            DDeviceDatatypeCollection coll = new DDeviceDatatypeCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object DataTypeId)
        {
            return (DDeviceDatatype.Delete(DataTypeId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object DataTypeId)
        {
            return (DDeviceDatatype.Destroy(DataTypeId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(decimal DeviceId,string DataTypeName,string StartChar,string StopChar,string SplitChar,string Descriptions)
	    {
		    DDeviceDatatype item = new DDeviceDatatype();
		    
            item.DeviceId = DeviceId;
            
            item.DataTypeName = DataTypeName;
            
            item.StartChar = StartChar;
            
            item.StopChar = StopChar;
            
            item.SplitChar = SplitChar;
            
            item.Descriptions = Descriptions;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(decimal DataTypeId,decimal DeviceId,string DataTypeName,string StartChar,string StopChar,string SplitChar,string Descriptions)
	    {
		    DDeviceDatatype item = new DDeviceDatatype();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.DataTypeId = DataTypeId;
				
			item.DeviceId = DeviceId;
				
			item.DataTypeName = DataTypeName;
				
			item.StartChar = StartChar;
				
			item.StopChar = StopChar;
				
			item.SplitChar = SplitChar;
				
			item.Descriptions = Descriptions;
				
	        item.Save(UserName);
	    }
    }
}
