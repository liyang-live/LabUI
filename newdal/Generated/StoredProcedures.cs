using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace LIS.DAL{
    public partial class SPs{
        
        /// <summary>
        /// Creates an object wrapper for the BAOCAO_SLUONG_XETNGHIEM_THEODOITUONG Procedure
        /// </summary>
        public static StoredProcedure BaocaoSluongXetnghiemTheodoituong(DateTime? FromDate, DateTime? ToDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("BAOCAO_SLUONG_XETNGHIEM_THEODOITUONG", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the BAOCAO_SOLUONG_NHANGUI_MAU Procedure
        /// </summary>
        public static StoredProcedure BaocaoSoluongNhanguiMau(DateTime? fromDate, DateTime? ToDate, int? ObjectTypeID, int? IDLoaiXN, int? DepartmentID, int? Noitru, int? LAM, string NguoiNhan, string NguoiGui, int? StatusPrint, int? GioNhan)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("BAOCAO_SOLUONG_NHANGUI_MAU", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@fromDate", fromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_Loai_XN", IDLoaiXN, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Noitru", Noitru, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@LAM", LAM, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@NguoiNhan", NguoiNhan, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NguoiGui", NguoiGui, DbType.String, null, null);
        	
            sp.Command.AddParameter("@StatusPrint", StatusPrint, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@GioNhan", GioNhan, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the BaoCaoSoLuongBNHoanTatXN Procedure
        /// </summary>
        public static StoredProcedure BaoCaoSoLuongBNHoanTatXN(DateTime? pFromDate, DateTime? pToDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("BaoCaoSoLuongBNHoanTatXN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromDate", pFromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pToDate", pToDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the DA_BaoCaoLuu Procedure
        /// </summary>
        public static StoredProcedure DaBaoCaoLuu(DateTime? FromDate, DateTime? ToDate, int? DepartmentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("DA_BaoCaoLuu", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DepartmentID", DepartmentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Danhmuc_Laydanhsachbaocaohethong Procedure
        /// </summary>
        public static StoredProcedure DanhmucLaydanhsachbaocaohethong()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Danhmuc_Laydanhsachbaocaohethong", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Danhmuc_Xoadanhsachbaocaohethong Procedure
        /// </summary>
        public static StoredProcedure DanhmucXoadanhsachbaocaohethong(string lstID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Danhmuc_Xoadanhsachbaocaohethong", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@lstID", lstID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the DeleteTestinforTResultTblYeucauXN Procedure
        /// </summary>
        public static StoredProcedure DeleteTestinforTResultTblYeucauXN(string barcode, int? testTypeId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("DeleteTestinforTResultTblYeucauXN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@testTypeId", testTypeId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the DONGANH_BAOCAO_TONGHOP Procedure
        /// </summary>
        public static StoredProcedure DonganhBaocaoTonghop(DateTime? FromDate, DateTime? ToDate, string ObjectTypeID, string TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("DONGANH_BAOCAO_TONGHOP", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_addtosourcecontrol Procedure
        /// </summary>
        public static StoredProcedure DtAddtosourcecontrol(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_addtosourcecontrol", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@vchSourceSafeINI", vchSourceSafeINI, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchProjectName", vchProjectName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchComment", vchComment, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_addtosourcecontrol_u Procedure
        /// </summary>
        public static StoredProcedure DtAddtosourcecontrolU(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_addtosourcecontrol_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@vchSourceSafeINI", vchSourceSafeINI, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchProjectName", vchProjectName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchComment", vchComment, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_adduserobject Procedure
        /// </summary>
        public static StoredProcedure DtAdduserobject()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_adduserobject", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_adduserobject_vcs Procedure
        /// </summary>
        public static StoredProcedure DtAdduserobjectVcs(string vchProperty)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_adduserobject_vcs", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@vchProperty", vchProperty, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_checkinobject Procedure
        /// </summary>
        public static StoredProcedure DtCheckinobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, int? iVCSFlags, int? iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_checkinobject", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@chObjectType", chObjectType, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@vchObjectName", vchObjectName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchComment", vchComment, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@iVCSFlags", iVCSFlags, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@iActionFlag", iActionFlag, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@txStream1", txStream1, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@txStream2", txStream2, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@txStream3", txStream3, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_checkinobject_u Procedure
        /// </summary>
        public static StoredProcedure DtCheckinobjectU(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, int? iVCSFlags, int? iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_checkinobject_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@chObjectType", chObjectType, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@vchObjectName", vchObjectName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchComment", vchComment, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.String, null, null);
        	
            sp.Command.AddParameter("@iVCSFlags", iVCSFlags, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@iActionFlag", iActionFlag, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@txStream1", txStream1, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@txStream2", txStream2, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@txStream3", txStream3, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_checkoutobject Procedure
        /// </summary>
        public static StoredProcedure DtCheckoutobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, int? iVCSFlags, int? iActionFlag)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_checkoutobject", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@chObjectType", chObjectType, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@vchObjectName", vchObjectName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchComment", vchComment, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@iVCSFlags", iVCSFlags, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@iActionFlag", iActionFlag, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_checkoutobject_u Procedure
        /// </summary>
        public static StoredProcedure DtCheckoutobjectU(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, int? iVCSFlags, int? iActionFlag)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_checkoutobject_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@chObjectType", chObjectType, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@vchObjectName", vchObjectName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchComment", vchComment, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.String, null, null);
        	
            sp.Command.AddParameter("@iVCSFlags", iVCSFlags, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@iActionFlag", iActionFlag, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_displayoaerror Procedure
        /// </summary>
        public static StoredProcedure DtDisplayoaerror(int? iObject, int? iresult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_displayoaerror", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@iObject", iObject, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@iresult", iresult, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_displayoaerror_u Procedure
        /// </summary>
        public static StoredProcedure DtDisplayoaerrorU(int? iObject, int? iresult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_displayoaerror_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@iObject", iObject, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@iresult", iresult, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_droppropertiesbyid Procedure
        /// </summary>
        public static StoredProcedure DtDroppropertiesbyid(int? id, string propertyX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_droppropertiesbyid", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_dropuserobjectbyid Procedure
        /// </summary>
        public static StoredProcedure DtDropuserobjectbyid(int? id)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_dropuserobjectbyid", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_generateansiname Procedure
        /// </summary>
        public static StoredProcedure DtGenerateansiname(string name)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_generateansiname", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddOutputParameter("@name", DbType.AnsiString, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_getobjwithprop Procedure
        /// </summary>
        public static StoredProcedure DtGetobjwithprop(string propertyX, string valueX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_getobjwithprop", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@value", valueX, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_getobjwithprop_u Procedure
        /// </summary>
        public static StoredProcedure DtGetobjwithpropU(string propertyX, string uvalue)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_getobjwithprop_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@uvalue", uvalue, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_getpropertiesbyid Procedure
        /// </summary>
        public static StoredProcedure DtGetpropertiesbyid(int? id, string propertyX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_getpropertiesbyid", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_getpropertiesbyid_u Procedure
        /// </summary>
        public static StoredProcedure DtGetpropertiesbyidU(int? id, string propertyX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_getpropertiesbyid_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_getpropertiesbyid_vcs Procedure
        /// </summary>
        public static StoredProcedure DtGetpropertiesbyidVcs(int? id, string propertyX, string valueX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_getpropertiesbyid_vcs", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            sp.Command.AddOutputParameter("@value", DbType.AnsiString, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_getpropertiesbyid_vcs_u Procedure
        /// </summary>
        public static StoredProcedure DtGetpropertiesbyidVcsU(int? id, string propertyX, string valueX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_getpropertiesbyid_vcs_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            sp.Command.AddOutputParameter("@value", DbType.String, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_isundersourcecontrol Procedure
        /// </summary>
        public static StoredProcedure DtIsundersourcecontrol(string vchLoginName, string vchPassword, int? iWhoToo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_isundersourcecontrol", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@iWhoToo", iWhoToo, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_isundersourcecontrol_u Procedure
        /// </summary>
        public static StoredProcedure DtIsundersourcecontrolU(string vchLoginName, string vchPassword, int? iWhoToo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_isundersourcecontrol_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.String, null, null);
        	
            sp.Command.AddParameter("@iWhoToo", iWhoToo, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_removefromsourcecontrol Procedure
        /// </summary>
        public static StoredProcedure DtRemovefromsourcecontrol()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_removefromsourcecontrol", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_setpropertybyid Procedure
        /// </summary>
        public static StoredProcedure DtSetpropertybyid(int? id, string propertyX, string valueX, byte[] lvalue)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_setpropertybyid", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@value", valueX, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@lvalue", lvalue, DbType.Binary, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_setpropertybyid_u Procedure
        /// </summary>
        public static StoredProcedure DtSetpropertybyidU(int? id, string propertyX, string uvalue, byte[] lvalue)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_setpropertybyid_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@id", id, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@property", propertyX, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@uvalue", uvalue, DbType.String, null, null);
        	
            sp.Command.AddParameter("@lvalue", lvalue, DbType.Binary, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_validateloginparams Procedure
        /// </summary>
        public static StoredProcedure DtValidateloginparams(string vchLoginName, string vchPassword)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_validateloginparams", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_validateloginparams_u Procedure
        /// </summary>
        public static StoredProcedure DtValidateloginparamsU(string vchLoginName, string vchPassword)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_validateloginparams_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_vcsenabled Procedure
        /// </summary>
        public static StoredProcedure DtVcsenabled()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_vcsenabled", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_verstamp006 Procedure
        /// </summary>
        public static StoredProcedure DtVerstamp006()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_verstamp006", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_verstamp007 Procedure
        /// </summary>
        public static StoredProcedure DtVerstamp007()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_verstamp007", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_whocheckedout Procedure
        /// </summary>
        public static StoredProcedure DtWhocheckedout(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_whocheckedout", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@chObjectType", chObjectType, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@vchObjectName", vchObjectName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the dt_whocheckedout_u Procedure
        /// </summary>
        public static StoredProcedure DtWhocheckedoutU(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("dt_whocheckedout_u", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@chObjectType", chObjectType, DbType.AnsiStringFixedLength, null, null);
        	
            sp.Command.AddParameter("@vchObjectName", vchObjectName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchLoginName", vchLoginName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vchPassword", vchPassword, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GET_DATA_SL_XN_THEOKHOA_BACSI Procedure
        /// </summary>
        public static StoredProcedure GetDataSlXnTheokhoaBacsi(DateTime? FromDate, DateTime? ToDate, int? KHOA, int? BACSI, int? ObjectType, int? TestTypeList)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GET_DATA_SL_XN_THEOKHOA_BACSI", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@KHOA", KHOA, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@BACSI", BACSI, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeList", TestTypeList, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetAllMappingTest Procedure
        /// </summary>
        public static StoredProcedure GetAllMappingTest()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetAllMappingTest", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetBarCode_HienTD Procedure
        /// </summary>
        public static StoredProcedure GetBarCodeHienTD(DateTime? TestDate, int? PatientID, int? allowSameTestTypeInDay)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetBarCode_HienTD", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@allowSameTestTypeInDay", allowSameTestTypeInDay, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetDataControlAndPrice Procedure
        /// </summary>
        public static StoredProcedure GetDataControlAndPrice(int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetDataControlAndPrice", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetDataPHIEUTHU Procedure
        /// </summary>
        public static StoredProcedure GetDataPHIEUTHU(int? PatientId, string TestTypeList)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetDataPHIEUTHU", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientId", PatientId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeList", TestTypeList, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetDeviceList Procedure
        /// </summary>
        public static StoredProcedure GetDeviceList()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetDeviceList", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetDeviceListFromTestTypeID Procedure
        /// </summary>
        public static StoredProcedure GetDeviceListFromTestTypeID(int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetDeviceListFromTestTypeID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetPatientAndTestInfo_VNIO Procedure
        /// </summary>
        public static StoredProcedure GetPatientAndTestInfoVnio(string psophieu, string pName, int? psex, DateTime? pfromdatetime, DateTime? ptoDatetime, bool? pcheck, int? ptestTypeId, int? pHastest)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetPatientAndTestInfo_VNIO", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@psophieu", psophieu, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pName", pName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@psex", psex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pfromdatetime", pfromdatetime, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ptoDatetime", ptoDatetime, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pcheck", pcheck, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ptestTypeId", ptestTypeId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pHastest", pHastest, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetPatientByStatusAndTestTypeId Procedure
        /// </summary>
        public static StoredProcedure GetPatientByStatusAndTestTypeId(DateTime? pFromDate, DateTime? pToDate, int? pStatus, int? pTestTypeList)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetPatientByStatusAndTestTypeId", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromDate", pFromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pToDate", pToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pStatus", pStatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestTypeList", pTestTypeList, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GetResultAndInfo Procedure
        /// </summary>
        public static StoredProcedure GetResultAndInfo(DateTime? TODATETIME, DateTime? FROMDATETIME, string KHOA)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GetResultAndInfo", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TODATETIME", TODATETIME, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@FROMDATETIME", FROMDATETIME, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@KHOA", KHOA, DbType.AnsiStringFixedLength, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_BAOCAO_SOTRUC Procedure
        /// </summary>
        public static StoredProcedure GtvtBaocaoSotruc(DateTime? FromDate, DateTime? ToDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_BAOCAO_SOTRUC", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM Procedure
        /// </summary>
        public static StoredProcedure GtvtBaocaoTongsluongLoaixetnghiem(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeID, int? IDKhoa, int? IDLoaiXN, int? HosStatus, int? IsTongKhoa)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_Khoa", IDKhoa, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_LoaiXN", IDLoaiXN, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Hos_Status", HosStatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@IsTongKhoa", IsTongKhoa, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM_CHITIET Procedure
        /// </summary>
        public static StoredProcedure GtvtBaocaoTongsluongLoaixetnghiemChitiet(DateTime? NgayBatDau, DateTime? NgayKetThuc, int? ObjectTypeID, int? IDKhoa, int? IDLoaiXN, int? HosStatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM_CHITIET", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@NgayBatDau", NgayBatDau, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@NgayKetThuc", NgayKetThuc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_Khoa", IDKhoa, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_LoaiXN", IDLoaiXN, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Hos_Status", HosStatus, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM_TONGHOP Procedure
        /// </summary>
        public static StoredProcedure GtvtBaocaoTongsluongLoaixetnghiemTonghop(DateTime? NgayBatDau, DateTime? NgayKetThuc, int? ObjectTypeID, int? IDKhoa, int? IDLoaiXN, int? HosStatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM_TONGHOP", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@NgayBatDau", NgayBatDau, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@NgayKetThuc", NgayKetThuc, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_Khoa", IDKhoa, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_LoaiXN", IDLoaiXN, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Hos_Status", HosStatus, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM2 Procedure
        /// </summary>
        public static StoredProcedure GtvtBaocaoTongsluongLOAIXETNGHIEM2(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeID, int? IDKhoa, int? IDLoaiXN, int? HosStatus, int? IsTongKhoa)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_BAOCAO_TONGSLUONG_LOAIXETNGHIEM2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_Khoa", IDKhoa, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_LoaiXN", IDLoaiXN, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Hos_Status", HosStatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@IsTongKhoa", IsTongKhoa, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_BaoCaoLuu_NoBarCode Procedure
        /// </summary>
        public static StoredProcedure GtvtBaoCaoLuuNoBarCode(string pFromBarcode, string pToBarcode, int? TestType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_BaoCaoLuu_NoBarCode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromBarcode", pFromBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pToBarcode", pToBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType", TestType, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_GetLabPatientInfo Procedure
        /// </summary>
        public static StoredProcedure GtvtGetLabPatientInfo(string soPhieu)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_GetLabPatientInfo", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@soPhieu", soPhieu, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_GetTestResultForPrintingManyV2FromDateToDate Procedure
        /// </summary>
        public static StoredProcedure GtvtGetTestResultForPrintingManyV2FromDateToDate(string PatientID, string TestTypeID, string TestID, string Fromdate, string Todate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_GetTestResultForPrintingManyV2FromDateToDate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@TestID", TestID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Fromdate", Fromdate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Todate", Todate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the GTVT_GetTestResultForPrintV2FromDateToDate Procedure
        /// </summary>
        public static StoredProcedure GtvtGetTestResultForPrintV2FromDateToDate(string PatientID, string TestTypeID, string TestID, string Fromdate, string Todate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("GTVT_GetTestResultForPrintV2FromDateToDate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@TestID", TestID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Fromdate", Fromdate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Todate", Todate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the InPhieuChiDinhXetNghiem Procedure
        /// </summary>
        public static StoredProcedure InPhieuChiDinhXetNghiem(int? PatientId, string TestTypeList, string testId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("InPhieuChiDinhXetNghiem", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientId", PatientId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeList", TestTypeList, DbType.String, null, null);
        	
            sp.Command.AddParameter("@testId", testId, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Insert_RegList Procedure
        /// </summary>
        public static StoredProcedure InsertRegList(long? TestID, string Barcode, short? STATUS, int? TestTypeID, int? DatacotrolID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Insert_RegList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@STATUS", STATUS, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Datacotrol_ID", DatacotrolID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the INSERT_TESTINFOR Procedure
        /// </summary>
        public static StoredProcedure InsertTestinfor(int? TestTypeID, int? PatientID, string Barcode, DateTime? TestDate, int? AssignID, int? DiagnosticianID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("INSERT_TESTINFOR", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Assign_ID", AssignID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Diagnostician_ID", DiagnosticianID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the INSERT_TESTINFOR1 Procedure
        /// </summary>
        public static StoredProcedure InsertTESTINFOR1(int? TestTypeID, int? PatientID, string Barcode, int? AssignID, int? DiagnosticianID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("INSERT_TESTINFOR1", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Assign_ID", AssignID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Diagnostician_ID", DiagnosticianID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the JCLV_GetTestResultForPrintV2FromDateToDate Procedure
        /// </summary>
        public static StoredProcedure JclvGetTestResultForPrintV2FromDateToDate(int? PatientID, string TestTypeID, string Fromdate, string Todate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("JCLV_GetTestResultForPrintV2FromDateToDate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Fromdate", Fromdate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Todate", Todate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the JCLV_PHIEU_YEUCAU_XETNGHIEM Procedure
        /// </summary>
        public static StoredProcedure JclvPhieuYeucauXetnghiem(int? PatientID, string TestID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("JCLV_PHIEU_YEUCAU_XETNGHIEM", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the JCLV_PHIEU_YEUCAU_XETNGHIEM_HANGLOAT Procedure
        /// </summary>
        public static StoredProcedure JclvPhieuYeucauXetnghiemHangloat(int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("JCLV_PHIEU_YEUCAU_XETNGHIEM_HANGLOAT", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the JCLV_spGetTestDayOfPatient Procedure
        /// </summary>
        public static StoredProcedure JclvSpGetTestDayOfPatient(string pTestDateFrom, string pTestDateTo, string TestTypeID, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("JCLV_spGetTestDayOfPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the JCLV_WELLBE_UpdateTestDataID Procedure
        /// </summary>
        public static StoredProcedure JclvWellbeUpdateTestDataID(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeID, int? DepartmentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("JCLV_WELLBE_UpdateTestDataID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_GetAllDetailTypeList Procedure
        /// </summary>
        public static StoredProcedure KetnoiGetAllDetailTypeList(int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_GetAllDetailTypeList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_GetMappingTestTypeList Procedure
        /// </summary>
        public static StoredProcedure KetnoiGetMappingTestTypeList()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_GetMappingTestTypeList", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_HIS_DANHMUC_DICHVU Procedure
        /// </summary>
        public static StoredProcedure KetnoiHisDanhmucDichvu(string MaKieu)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_HIS_DANHMUC_DICHVU", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Ma_Kieu", MaKieu, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_HPGetBarCode Procedure
        /// </summary>
        public static StoredProcedure KetnoiHPGetBarCode(int? PatientID, DateTime? TestDate, string Barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_HPGetBarCode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddOutputParameter("@Barcode", DbType.String, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_Insert_RegList Procedure
        /// </summary>
        public static StoredProcedure KetnoiInsertRegList(long? TestID, string Barcode, short? STATUS, int? TestTypeID, int? DatacotrolID, int? AssignDetailID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_Insert_RegList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@STATUS", STATUS, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Datacotrol_ID", DatacotrolID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@AssignDetail_ID", AssignDetailID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_KiemTraTonTai Procedure
        /// </summary>
        public static StoredProcedure KetnoiKiemTraTonTai(string PID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_KiemTraTonTai", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_LAYTHONGTIN_CHITIET Procedure
        /// </summary>
        public static StoredProcedure KetnoiLaythongtinChitiet(int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_LAYTHONGTIN_CHITIET", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_LoadDataHISDichVu Procedure
        /// </summary>
        public static StoredProcedure KetnoiLoadDataHISDichVu()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_LoadDataHISDichVu", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_NHTD_Insert_RegList Procedure
        /// </summary>
        public static StoredProcedure KetnoiNhtdInsertRegList(long? TestID, string Barcode, short? STATUS, int? TestTypeID, int? DatacotrolID, int? AssignDetailID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_NHTD_Insert_RegList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@STATUS", STATUS, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Datacotrol_ID", DatacotrolID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@AssignDetail_ID", AssignDetailID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_NHTD_SinhLaiBarcode Procedure
        /// </summary>
        public static StoredProcedure KetnoiNhtdSinhLaiBarcode(DateTime? TestDate, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_NHTD_SinhLaiBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_SearchKetQua Procedure
        /// </summary>
        public static StoredProcedure KetnoiSearchKetQua(string SoPhieu)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_SearchKetQua", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@SoPhieu", SoPhieu, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_Sinh_BarCode_XN Procedure
        /// </summary>
        public static StoredProcedure KetnoiSinhBarCodeXn(DateTime? DatetimeX, int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_Sinh_BarCode_XN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Datetime", DatetimeX, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_Sinh_BarCode_XN_TRUC Procedure
        /// </summary>
        public static StoredProcedure KetnoiSinhBarCodeXnTruc(DateTime? DatetimeX, int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_Sinh_BarCode_XN_TRUC", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Datetime", DatetimeX, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_THAIHA_GetMaxBarcode Procedure
        /// </summary>
        public static StoredProcedure KetnoiThaihaGetMaxBarcode(string DateTimeX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_THAIHA_GetMaxBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DateTime", DateTimeX, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_THONGTIN_KETQUA Procedure
        /// </summary>
        public static StoredProcedure KetnoiThongtinKetqua(int? TestID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_THONGTIN_KETQUA", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the KETNOI_YHHQ_Insert_RegList Procedure
        /// </summary>
        public static StoredProcedure KetnoiYhhqInsertRegList(long? TestID, string Barcode, short? STATUS, int? TestTypeID, string TestDataID, int? AssignDetailID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("KETNOI_YHHQ_Insert_RegList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@STATUS", STATUS, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestData_ID", TestDataID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@AssignDetail_ID", AssignDetailID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the LAM_sp_GetResultDetail Procedure
        /// </summary>
        public static StoredProcedure LamSpGetResultDetail(string pTestDate, int? pTestTypeID, string Barcode, string LAM)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("LAM_sp_GetResultDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@LAM", LAM, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the LAM_spGetPatientTest Procedure
        /// </summary>
        public static StoredProcedure LamSpGetPatientTest(string pTestDate, string LAM)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("LAM_spGetPatientTest", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@LAM", LAM, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the LaoKhoa_GetLabPatientInfo Procedure
        /// </summary>
        public static StoredProcedure LaoKhoaGetLabPatientInfo(string soPhieu)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("LaoKhoa_GetLabPatientInfo", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@soPhieu", soPhieu, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the LoadTestType Procedure
        /// </summary>
        public static StoredProcedure LoadTestType(DateTime? fromdate, DateTime? todate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("LoadTestType", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@fromdate", fromdate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@todate", todate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Med_Lis_PATIENTUPDATE Procedure
        /// </summary>
        public static StoredProcedure MedLisPatientupdate(string PID, string Name, int? Age, int? Year, bool? sex)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Med_Lis_PATIENTUPDATE", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Name", Name, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Year", Year, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@sex", sex, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the MEDLIS_INSERT_TESTINFOR Procedure
        /// </summary>
        public static StoredProcedure MedlisInsertTestinfor(int? TestTypeID, int? PatientID, string Barcode, string TestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("MEDLIS_INSERT_TESTINFOR", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the NB_GetBarcodeForUpdate Procedure
        /// </summary>
        public static StoredProcedure NbGetBarcodeForUpdate(string pTestDateFrom, string pTestDateTo, int? pTestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("NB_GetBarcodeForUpdate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the NB_GetResultDetailForUpdatePatient Procedure
        /// </summary>
        public static StoredProcedure NbGetResultDetailForUpdatePatient(string pTestDateFrom, string pTestDateTo, int? pTestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("NB_GetResultDetailForUpdatePatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the NB_UpdateResultDetailForPatient Procedure
        /// </summary>
        public static StoredProcedure NbUpdateResultDetailForPatient(string pTestDate, int? pTestTypeID, int? PatientID, int? poldPatientID, string Barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("NB_UpdateResultDetailForPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@poldPatient_ID", poldPatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the NHTD_BAOCAO_SLUONG_PKHAM_GUILEN Procedure
        /// </summary>
        public static StoredProcedure NhtdBaocaoSluongPkhamGuilen(DateTime? fromDate, DateTime? ToDate, int? ObjectTypeID, int? IDLoaiXN, int? DepartmentID, int? Noitru, string KieuBaoCao, string UserName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("NHTD_BAOCAO_SLUONG_PKHAM_GUILEN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@fromDate", fromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ID_Loai_XN", IDLoaiXN, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Noitru", Noitru, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@KieuBaoCao", KieuBaoCao, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UserName", UserName, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the PATIENT_INFO_Delete Procedure
        /// </summary>
        public static StoredProcedure PatientInfoDelete(decimal? ID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("PATIENT_INFO_Delete", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@ID", ID, DbType.Decimal, 0, 18);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the PATIENT_INFO_GET Procedure
        /// </summary>
        public static StoredProcedure PatientInfoGet(decimal? ID, string PID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("PATIENT_INFO_GET", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@ID", ID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the PATIENT_INFO_INSERT Procedure
        /// </summary>
        public static StoredProcedure PatientInfoInsert(string PID, string Name, string Address, int? Age, int? Year, string DOB, bool? sex, string Diagnostic, string IdentifyNum, string InsuranceNum, short? Department, string Room, string Bed, DateTime? DateUPdate, short? intObjectType, int? LotID, decimal? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("PATIENT_INFO_INSERT", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Name", Name, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Address", Address, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Year", Year, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DOB", DOB, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sex", sex, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Diagnostic", Diagnostic, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IdentifyNum", IdentifyNum, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Insurance_Num", InsuranceNum, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Department", Department, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Room", Room, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Bed", Bed, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DateUPdate", DateUPdate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@intObjectType", intObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@LotID", LotID, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@Patient_ID", DbType.Decimal, 0, 18);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the PATIENT_INFO_INSERT_DELETE Procedure
        /// </summary>
        public static StoredProcedure PatientInfoInsertDelete(decimal? PatientID, string PID, string Name, string Address, int? Age, int? Year, bool? sex, string Diagnostic, string IdentifyNum, string InsuranceNum, short? Department, string Room, string Bed, DateTime? DateUPdate, short? intObjectType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("PATIENT_INFO_INSERT_DELETE", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Name", Name, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Address", Address, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Year", Year, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@sex", sex, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Diagnostic", Diagnostic, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IdentifyNum", IdentifyNum, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Insurance_Num", InsuranceNum, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Department", Department, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Room", Room, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Bed", Bed, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DateUPdate", DateUPdate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@intObjectType", intObjectType, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the PATIENT_INFO_Update Procedure
        /// </summary>
        public static StoredProcedure PatientInfoUpdate(decimal? ID, string PID, string Name, string Address, string InsuranceNum, int? Age, int? Year, string DOB, bool? sex, short? ObjectType, string Diagnostic, short? Department, string Room, string Bed, string IdentifyNum, DateTime? DateUpdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("PATIENT_INFO_Update", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@ID", ID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Name", Name, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Address", Address, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Insurance_Num", InsuranceNum, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Year", Year, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DOB", DOB, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sex", sex, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Diagnostic", Diagnostic, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Department", Department, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Room", Room, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Bed", Bed, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IdentifyNum", IdentifyNum, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DateUpdate", DateUpdate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the proc_HPGetBarCode Procedure
        /// </summary>
        public static StoredProcedure ProcHPGetBarCode(int? PatientID, DateTime? TestDate, string Barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("proc_HPGetBarCode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddOutputParameter("@Barcode", DbType.String, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_BAOCAODANHSACHTIENKHAMBENH Procedure
        /// </summary>
        public static StoredProcedure QlpkBaocaodanhsachtienkhambenh(string sFromDate, string sToDate, short? intObjectType, short? intServiceType, short? intSex)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_BAOCAODANHSACHTIENKHAMBENH", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@sFromDate", sFromDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sToDate", sToDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@intObjectType", intObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@intServiceType", intServiceType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@intSex", intSex, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_BaoCaoTongHopThuVienPhi Procedure
        /// </summary>
        public static StoredProcedure QlpkBaoCaoTongHopThuVienPhi(string sFromDate, string sToDate, short? intObjectType, short? intSex)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_BaoCaoTongHopThuVienPhi", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@sFromDate", sFromDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sToDate", sToDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@intObjectType", intObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@intSex", intSex, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_DeletePayment Procedure
        /// </summary>
        public static StoredProcedure QlpkDeletePayment(int? PaymentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_DeletePayment", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PaymentID", PaymentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetInfor_PrintPayment Procedure
        /// </summary>
        public static StoredProcedure QlpkGetInforPrintPayment(string RegNo, string sDate, int? PatientID, int? RegType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetInfor_PrintPayment", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegNo", RegNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sDate", sDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@RegType", RegType, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetInfor_PrintPKB_XN Procedure
        /// </summary>
        public static StoredProcedure QlpkGetInforPrintPKBXn(string RegNo, string sDate, int? PatientID, int? RegType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetInfor_PrintPKB_XN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegNo", RegNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sDate", sDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@RegType", RegType, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetPaymentList Procedure
        /// </summary>
        public static StoredProcedure QlpkGetPaymentList(short? pvintRegType, string pvsPatientName, string pvRegNo, int? pvintPaymentReasonID, string pvdtmFrom, string pvdtmTo, double? pvValue1, double? pvValue2, int? pvintGreater, int? pvintLess)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetPaymentList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pv_intRegType", pvintRegType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@pv_sPatientName", pvsPatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pv_RegNo", pvRegNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pv_intPaymentReasonID", pvintPaymentReasonID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pv_dtmFrom", pvdtmFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pv_dtmTo", pvdtmTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pv_Value1", pvValue1, DbType.Double, null, 53);
        	
            sp.Command.AddParameter("@pv_Value2", pvValue2, DbType.Double, null, 53);
        	
            sp.Command.AddParameter("@pv_intGreater", pvintGreater, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pv_intLess", pvintLess, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetRegNoList Procedure
        /// </summary>
        public static StoredProcedure QlpkGetRegNoList(string sDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetRegNoList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@sDate", sDate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetRegNoListForPayment Procedure
        /// </summary>
        public static StoredProcedure QlpkGetRegNoListForPayment()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetRegNoListForPayment", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetRegServiceList Procedure
        /// </summary>
        public static StoredProcedure QlpkGetRegServiceList(short? RegType, short? PaymentStatus, string pvsPID, string pvsName, int? intSex, int? intObject, string dtmFrom, string dtmTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetRegServiceList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegType", RegType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@PaymentStatus", PaymentStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@pv_sPID", pvsPID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pv_sName", pvsName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@intSex", intSex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@intObject", intObject, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@dtmFrom", dtmFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@dtmTo", dtmTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetTestServiceDetailOfPatient Procedure
        /// </summary>
        public static StoredProcedure QlpkGetTestServiceDetailOfPatient(int? RegID, string sDate, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetTestServiceDetailOfPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegID", RegID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@sDate", sDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_GetTestServiceDetailOfPatientForPayment Procedure
        /// </summary>
        public static StoredProcedure QlpkGetTestServiceDetailOfPatientForPayment(string RegNo, string sDate, int? PatientID, int? RegType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_GetTestServiceDetailOfPatientForPayment", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegNo", RegNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sDate", sDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@RegType", RegType, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_InsertNewPayment Procedure
        /// </summary>
        public static StoredProcedure QlpkInsertNewPayment(long? RegID, long? PatientID, string PaymentDate, string sUser, short? ReasonID, decimal? TotalPayment, string sDesc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_InsertNewPayment", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegID", RegID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@PaymentDate", PaymentDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sUser", sUser, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ReasonID", ReasonID, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@TotalPayment", TotalPayment, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@sDesc", sDesc, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_ThongKeThuTienXN Procedure
        /// </summary>
        public static StoredProcedure QlpkThongKeThuTienXN(string sFromDate, string sToDate, short? intObjectType, short? intSex)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_ThongKeThuTienXN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@sFromDate", sFromDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@sToDate", sToDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@intObjectType", intObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@intSex", intSex, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the QLPK_UpdateRegService Procedure
        /// </summary>
        public static StoredProcedure QlpkUpdateRegService(long? RegID, long? PatientID, string TestDate, string RegNo, short? ServiceType, short? RegType, short? nTime, decimal? TotalMoney, string sDesc, short? InsertOrUpdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("QLPK_UpdateRegService", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegID", RegID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@RegNo", RegNo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ServiceType", ServiceType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@RegType", RegType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@nTime", nTime, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@TotalMoney", TotalMoney, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@sDesc", sDesc, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InsertOrUpdate", InsertOrUpdate, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the REDUCEDATA_DELETEDATA Procedure
        /// </summary>
        public static StoredProcedure ReducedataDeletedata(string pTestDateFrom, string pTestDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("REDUCEDATA_DELETEDATA", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the REDUCEDATA_GETDATA Procedure
        /// </summary>
        public static StoredProcedure ReducedataGetdata(string pTestDateFrom, string pTestDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("REDUCEDATA_GETDATA", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the REDUCEDATA_INSERT_TESTINFOR Procedure
        /// </summary>
        public static StoredProcedure ReducedataInsertTestinfor(int? TestTypeID, int? PatientID, string Barcode, DateTime? TestDate, int? AssignID, int? DiagnosticianID, decimal? TESTID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("REDUCEDATA_INSERT_TESTINFOR", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Assign_ID", AssignID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Diagnostician_ID", DiagnosticianID, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@TEST_ID", DbType.Decimal, 0, 18);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the REDUCEDATA_InsertResultDetail Procedure
        /// </summary>
        public static StoredProcedure ReducedataInsertResultDetail(int? TESTID, int? PatientID, int? TestTypeID, DateTime? TestDate, string TestSequence, int? DataSequence, string TestResult, string NormalLevelW, string NormalLevel, string MeasureUnit, string ParaName, short? Parastatus, string Note, bool? PrintData, string Barcode, int? UpdateNum)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("REDUCEDATA_InsertResultDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TEST_ID", TESTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Test_Sequence", TestSequence, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Data_Sequence", DataSequence, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_Result", TestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Normal_LevelW", NormalLevelW, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Normal_Level", NormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Measure_Unit", MeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Para_Name", ParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Para_status", Parastatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Note", Note, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PrintData", PrintData, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UpdateNum", UpdateNum, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the REDUCEDATA_PATIENT_INFO_INSERT Procedure
        /// </summary>
        public static StoredProcedure ReducedataPatientInfoInsert(string PID, string Name, string Address, int? Age, int? Year, bool? sex, string Diagnostic, string IdentifyNum, short? Department, string Room, string Bed, DateTime? DateUPdate, short? intObjectType, decimal? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("REDUCEDATA_PATIENT_INFO_INSERT", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Name", Name, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Address", Address, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Year", Year, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@sex", sex, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Diagnostic", Diagnostic, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IdentifyNum", IdentifyNum, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Department", Department, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Room", Room, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Bed", Bed, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DateUPdate", DateUPdate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@intObjectType", intObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddOutputParameter("@Patient_ID", DbType.Decimal, 0, 18);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_BaoCaoDSBNTestType Procedure
        /// </summary>
        public static StoredProcedure SpBaoCaoDSBNTestType(DateTime? pFromDate, DateTime? pToDate, int? testType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_BaoCaoDSBNTestType", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromDate", pFromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pToDate", pToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@testType", testType, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_CreateDummyTable Procedure
        /// </summary>
        public static StoredProcedure SpCreateDummyTable()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_CreateDummyTable", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_CreenTestReport Procedure
        /// </summary>
        public static StoredProcedure SpCreenTestReport(DateTime? fromDate, DateTime? toDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_CreenTestReport", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@fromDate", fromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@toDate", toDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReport Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReport(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? pTestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReport", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReport_NB Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportNb(string pTestDateFrom, string pTestDateTo, int? pTestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReport_NB", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReport_NB_V2 Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportNbV2(DateTime? pTestDateFrom, DateTime? pTestDateTo, string pTestTypeID, string pObjecttypeid, string pAssign)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReport_NB_V2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pObjecttype_id", pObjecttypeid, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@p_Assign", pAssign, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportDetail Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportDetail(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? pTestTypeID, short? ObjectType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportDetail_V2 Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportDetailV2(DateTime? pTestDateFrom, DateTime? pTestDateTo, string pTestTypeID, string ObjectType, string Assign)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportDetail_V2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Assign", Assign, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportDetail_V3 Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportDetailV3(DateTime? pTestDateFrom, DateTime? pTestDateTo, string pTestTypeID, string ObjectType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportDetail_V3", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetail(string pTestDateFrom, string pTestDateTo, int? pTestTypeID, short? ObjectType, int? DepartMentID, string PID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail_KQ Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetailKq(string pTestDateFrom, string pTestDateTo, int? pTestTypeID, short? ObjectType, int? DepartMentID, string PID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail_KQ", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail_KQ_VD Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetailKqVd(string pTestDateFrom, string pTestDateTo, int? pTestTypeID, short? ObjectType, int? DepartMentID, string PID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail_KQ_VD", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail_KQ_VD_HavingNoResult Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetailKqVdHavingNoResult(string pTestDateFrom, string pTestDateTo, int? pTestTypeID, short? ObjectType, int? DepartMentID, string PID, string SID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail_KQ_VD_HavingNoResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@SID", SID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail_KQ_VD_HavingResult Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetailKqVdHavingResult(string pTestDateFrom, string pTestDateTo, int? pTestTypeID, short? ObjectType, int? DepartMentID, string PID, string SID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail_KQ_VD_HavingResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@SID", SID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail_KQ_VD_JCLV Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetailKqVdJclv(string pTestDateFrom, string pTestDateTo, int? pTestTypeID, short? ObjectType, int? DepartMentID, string PID, string SID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail_KQ_VD_JCLV", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@SID", SID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail_KQ_VD_V2 Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetailKqVdV2(string pTestDateFrom, string pTestDateTo, string pTestTypeID, string ObjectType, int? DepartMentID, string PID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail_KQ_VD_V2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DailyTestReportParamDetail_KQ_VD_VNIO Procedure
        /// </summary>
        public static StoredProcedure SpDailyTestReportParamDetailKqVdVnio(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? pTestTypeID, short? ObjectType, int? DepartMentID, string PID, string idbacsy)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DailyTestReportParamDetail_KQ_VD_VNIO", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@DepartMent_ID", DepartMentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@idbacsy", idbacsy, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DeleteLot Procedure
        /// </summary>
        public static StoredProcedure SpDeleteLot(int? LOTID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DeleteLot", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@LOTID", LOTID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DeletePatient Procedure
        /// </summary>
        public static StoredProcedure SpDeletePatient(int? pvsPID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DeletePatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pv_sPID", pvsPID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_Department_Doctor_TestReport Procedure
        /// </summary>
        public static StoredProcedure SpDepartmentDoctorTestReport(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? pTestTypeID, int? DepartmentID, int? DoctorID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_Department_Doctor_TestReport", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DepartmentID", DepartmentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DoctorID", DoctorID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_DepartmentTestReportDetail Procedure
        /// </summary>
        public static StoredProcedure SpDepartmentTestReportDetail(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? pTestTypeID, string Department)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_DepartmentTestReportDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department", Department, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetAllDoctoranDepartment Procedure
        /// </summary>
        public static StoredProcedure SpGetAllDoctoranDepartment()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetAllDoctoranDepartment", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_GETDEVICE_DATATYPE Procedure
        /// </summary>
        public static StoredProcedure SpGetdeviceDatatype(int? intDeviceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_GETDEVICE_DATATYPE", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@intDeviceID", intDeviceID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_GETDEVICELIST Procedure
        /// </summary>
        public static StoredProcedure SpGetdevicelist()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_GETDEVICELIST", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetLotList Procedure
        /// </summary>
        public static StoredProcedure SpGetLotList(string FromDate, string ToDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetLotList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_GetPatientInfo Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientInfo(string barcode, decimal? TestID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_GetPatientInfo", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestID", TestID, DbType.Decimal, 0, 18);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetResultDetail Procedure
        /// </summary>
        public static StoredProcedure SpGetResultDetail(DateTime? pTestDate, int? pTestTypeID, string Barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetResultDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetResultDetailV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetResultDetailV2(string pTestDateFrom, string pTestDateTo, int? pTestTypeID, string Barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetResultDetailV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_GetTestID Procedure
        /// </summary>
        public static StoredProcedure SpGetTestID(string barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_GetTestID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestInfoandResult Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInfoandResult(int? patientId, string testTypeId, string testid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestInfoandResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@patientId", patientId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@testTypeId", testTypeId, DbType.String, null, null);
        	
            sp.Command.AddParameter("@testid", testid, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestInfoByPatientIDV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInfoByPatientIDV2(int? patientId, string testTypeId, string pTestDateFrom, string pTestDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestInfoByPatientIDV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@patientId", patientId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@testTypeId", testTypeId, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultByDepartment Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultByDepartment(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? pTestTypeID, int? DepartmentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultByDepartment", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DepartmentID", DepartmentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultForPrint Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForPrint(int? PatientID, int? TestTypeID, DateTime? Testdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultForPrint", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_date", Testdate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultForPrintFromDateToDate Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForPrintFromDateToDate(int? PatientID, int? TestTypeID, string Fromdate, string Todate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultForPrintFromDateToDate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Fromdate", Fromdate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Todate", Todate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultForPrintInvoiceV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForPrintInvoiceV2(int? PatientID, int? TestTypeID, string Testdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultForPrintInvoiceV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_date", Testdate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultForPrintV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForPrintV2(int? PatientID, int? TestTypeID, string Testdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultForPrintV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_date", Testdate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultForPrintV2FromDateToDate Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForPrintV2FromDateToDate(int? PatientID, int? TestTypeID, string Fromdate, string Todate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultForPrintV2FromDateToDate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Fromdate", Fromdate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Todate", Todate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultForUpdate Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForUpdate(int? PatientID, int? TestTypeID, DateTime? Testdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultForUpdate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_date", Testdate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestResultForUpdateV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForUpdateV2(int? PatientID, int? TestTypeID, string Testdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestResultForUpdateV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_date", Testdate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_GetTestServiceDetailOfPatient Procedure
        /// </summary>
        public static StoredProcedure SpGetTestServiceDetailOfPatient(int? RegID, string sDate, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_GetTestServiceDetailOfPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@RegID", RegID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@sDate", sDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_INSERTDATACONTROL Procedure
        /// </summary>
        public static StoredProcedure SpInsertdatacontrol(int? DATACONTROLID, int? DEVICEID, int? DATATYPEID, int? DATASEQUENCE, bool? ControlType, string DATANAME, string ALIASNAME, string MEASUREUNIT, short? DATAPOINT, string NORMALLEVEL, string NORMALLEVELW, bool? DATAPRINT, bool? DATAVIEW, string DATATYPE, string Description, int? InsertOrUpdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_INSERTDATACONTROL", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DATACONTROL_ID", DATACONTROLID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DEVICE_ID", DEVICEID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DATATYPE_ID", DATATYPEID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DATA_SEQUENCE", DATASEQUENCE, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Control_Type", ControlType, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@DATA_NAME", DATANAME, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ALIAS_NAME", ALIASNAME, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MEASURE_UNIT", MEASUREUNIT, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DATA_POINT", DATAPOINT, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@NORMAL_LEVEL", NORMALLEVEL, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NORMAL_LEVELW", NORMALLEVELW, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DATA_PRINT", DATAPRINT, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@DATA_VIEW", DATAVIEW, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@DATA_TYPE", DATATYPE, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Description", Description, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InsertOrUpdate", InsertOrUpdate, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_INSERTDATACONTROL_JCLV Procedure
        /// </summary>
        public static StoredProcedure SpInsertdatacontrolJclv(int? DATACONTROLID, int? DEVICEID, int? DATATYPEID, int? DATASEQUENCE, bool? ControlType, string DATANAME, string ALIASNAME, string MEASUREUNIT, short? DATAPOINT, string NORMALLEVEL, string NORMALLEVELW, bool? DATAPRINT, bool? DATAVIEW, string DATATYPE, string Description, decimal? Price, int? InsertOrUpdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_INSERTDATACONTROL_JCLV", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DATACONTROL_ID", DATACONTROLID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DEVICE_ID", DEVICEID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DATATYPE_ID", DATATYPEID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DATA_SEQUENCE", DATASEQUENCE, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Control_Type", ControlType, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@DATA_NAME", DATANAME, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ALIAS_NAME", ALIASNAME, DbType.String, null, null);
        	
            sp.Command.AddParameter("@MEASURE_UNIT", MEASUREUNIT, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DATA_POINT", DATAPOINT, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@NORMAL_LEVEL", NORMALLEVEL, DbType.String, null, null);
        	
            sp.Command.AddParameter("@NORMAL_LEVELW", NORMALLEVELW, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DATA_PRINT", DATAPRINT, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@DATA_VIEW", DATAVIEW, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@DATA_TYPE", DATATYPE, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Description", Description, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Price", Price, DbType.Currency, 4, 19);
        	
            sp.Command.AddParameter("@InsertOrUpdate", InsertOrUpdate, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SP_INSERTDEVICE Procedure
        /// </summary>
        public static StoredProcedure SpInsertdevice(int? DEVICEID, string DEVICENAME, int? DEVICETYPE, int? PORTID, int? ManuFactureID, int? TESTTYPEID, bool? DeviceControl, bool? Valid, string Description, string BarcodeType, short? SendType, int? InsertOrUpdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SP_INSERTDEVICE", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DEVICE_ID", DEVICEID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DEVICE_NAME", DEVICENAME, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DEVICE_TYPE", DEVICETYPE, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PORT_ID", PORTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ManuFacture_ID", ManuFactureID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TESTTYPE_ID", TESTTYPEID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DeviceControl", DeviceControl, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Valid", Valid, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Description", Description, DbType.String, null, null);
        	
            sp.Command.AddParameter("@BarcodeType", BarcodeType, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@SendType", SendType, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@InsertOrUpdate", InsertOrUpdate, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_ReportDailyBNVNIO Procedure
        /// </summary>
        public static StoredProcedure SpReportDailyBNVNIO(DateTime? pTestDateFrom, DateTime? pTestDateTo, string pDepartMent, string pTestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_ReportDailyBNVNIO", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pDepartMent", pDepartMent, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_RPT_AllPatientInfoAndResult Procedure
        /// </summary>
        public static StoredProcedure SpRptAllPatientInfoAndResult(DateTime? DateFrom, DateTime? DateTo, int? TestTypeID, short? ObjectTypeID, short? DepartmentID, decimal? DeviceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_RPT_AllPatientInfoAndResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DateFrom", DateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DateTo", DateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Device_ID", DeviceID, DbType.Decimal, 0, 18);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_RPT_BaoCaoLuu Procedure
        /// </summary>
        public static StoredProcedure SpRptBaoCaoLuu(DateTime? FromDate, DateTime? ToDate, int? ObjectType, int? DepartmentID, bool? AllResult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_RPT_BaoCaoLuu", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType", ObjectType, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DepartmentID", DepartmentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@AllResult", AllResult, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_RPT_BaoCaoLuu_VD Procedure
        /// </summary>
        public static StoredProcedure SpRptBaoCaoLuuVd(DateTime? FromDate, DateTime? ToDate, int? DepartmentID, bool? AllResult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_RPT_BaoCaoLuu_VD", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@DepartmentID", DepartmentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@AllResult", AllResult, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_UpdatePrintState Procedure
        /// </summary>
        public static StoredProcedure SpUpdatePrintState(int? pTestDetailID, bool? PrintData)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_UpdatePrintState", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDetail_ID", pTestDetailID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PrintData", PrintData, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sp_YHHQ_DangKyKetQuaTheoTestType Procedure
        /// </summary>
        public static StoredProcedure SpYhhqDangKyKetQuaTheoTestType(DateTime? pFromDate, DateTime? pToDate, string testType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sp_YHHQ_DangKyKetQuaTheoTestType", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromDate", pFromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pToDate", pToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@testType", testType, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spAddResultDetail Procedure
        /// </summary>
        public static StoredProcedure SpAddResultDetail(int? TESTID, int? PatientID, DateTime? TestDate, string TestResult, string NormalLevel, string ParaName, string Note, string Barcode, int? TestTypeID, int? DataSequence, string MeasureUnit, bool? PrintData, string NormalLevelW)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spAddResultDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TEST_ID", TESTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Test_Result", TestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Normal_Level", NormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Para_Name", ParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Note", Note, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Data_Sequence", DataSequence, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Measure_Unit", MeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PrintData", PrintData, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Normal_LevelW", NormalLevelW, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spAddResultDetail_CUONGDV Procedure
        /// </summary>
        public static StoredProcedure SpAddResultDetailCuongdv(int? TestDetailID, int? TESTID, int? PatientID, DateTime? TestDate, string TestResult, string NormalLevel, string ParaName, string Note, int? TestTypeID, string Barcode, int? DataSequence, string MeasureUnit, bool? PrintData, string NormalLevelW, int? InsertOrUpdate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spAddResultDetail_CUONGDV", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestDetail_ID", TestDetailID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TEST_ID", TESTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Test_Result", TestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Normal_Level", NormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Para_Name", ParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Note", Note, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Data_Sequence", DataSequence, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Measure_Unit", MeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PrintData", PrintData, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Normal_LevelW", NormalLevelW, DbType.String, null, null);
        	
            sp.Command.AddParameter("@InsertOrUpdate", InsertOrUpdate, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spAddResultDetail_CUONGDV_QuickDetail Procedure
        /// </summary>
        public static StoredProcedure SpAddResultDetailCuongdvQuickDetail(int? TESTID, int? PatientID, DateTime? TestDate, string TestResult, string NormalLevel, string ParaName, string Note, string Barcode, int? TestTypeID, int? DataSequence, string MeasureUnit, bool? PrintData, string NormalLevelW)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spAddResultDetail_CUONGDV_QuickDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TEST_ID", TESTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Test_Result", TestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Normal_Level", NormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Para_Name", ParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Note", Note, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Data_Sequence", DataSequence, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Measure_Unit", MeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PrintData", PrintData, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Normal_LevelW", NormalLevelW, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spAddResultDetail_V2 Procedure
        /// </summary>
        public static StoredProcedure SpAddResultDetailV2(int? TESTID, int? PatientID, DateTime? TestDate, string TestResult, string NormalLevel, string ParaName, string Note, string Barcode, int? TestTypeID, int? DataSequence, string MeasureUnit, bool? PrintData, string NormalLevelW)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spAddResultDetail_V2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TEST_ID", TESTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Test_Result", TestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Normal_Level", NormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Para_Name", ParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Note", Note, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Data_Sequence", DataSequence, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Measure_Unit", MeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PrintData", PrintData, DbType.Boolean, null, null);
        	
            sp.Command.AddParameter("@Normal_LevelW", NormalLevelW, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spBaoCao_DSBN_TestType Procedure
        /// </summary>
        public static StoredProcedure SpBaoCaoDsbnTestType(DateTime? pFromDate, DateTime? pToDate, int? testType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spBaoCao_DSBN_TestType", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromDate", pFromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pToDate", pToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@testType", testType, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spBuildRequestString Procedure
        /// </summary>
        public static StoredProcedure SpBuildRequestString(string pBarcode, short? pPortID, short? pSex, int? pAge, string pAddress, string pPatientName, string pRegDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spBuildRequestString", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pPortID", pPortID, DbType.Int16, 0, 5);
        	
            sp.Command.AddOutputParameter("@pSex", DbType.Int16, 0, 5);
            
            sp.Command.AddOutputParameter("@pAge", DbType.Int32, 0, 10);
            
            sp.Command.AddOutputParameter("@pAddress", DbType.String, null, null);
            
            sp.Command.AddOutputParameter("@pPatientName", DbType.String, null, null);
            
            sp.Command.AddOutputParameter("@pRegDate", DbType.AnsiString, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spBuildRequestString_CI4100 Procedure
        /// </summary>
        public static StoredProcedure SpBuildRequestStringCI4100(string pBarcode, short? pPortID, short? pSex, int? pAge, string pAddress, string pPatientName, string pRegDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spBuildRequestString_CI4100", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pPortID", pPortID, DbType.Int16, 0, 5);
        	
            sp.Command.AddOutputParameter("@pSex", DbType.Int16, 0, 5);
            
            sp.Command.AddOutputParameter("@pAge", DbType.Int32, 0, 10);
            
            sp.Command.AddOutputParameter("@pAddress", DbType.String, null, null);
            
            sp.Command.AddOutputParameter("@pPatientName", DbType.String, null, null);
            
            sp.Command.AddOutputParameter("@pRegDate", DbType.AnsiString, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spCheckBarcode Procedure
        /// </summary>
        public static StoredProcedure SpCheckBarcode(string pBarcode, string pParaName, int? pReSult, long? pTestDetailID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spCheckBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pParaName", pParaName, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@pReSult", DbType.Int32, 0, 10);
            
            sp.Command.AddOutputParameter("@pTestDetailID", DbType.Int64, 0, 19);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spCheckExistsBarCode Procedure
        /// </summary>
        public static StoredProcedure SpCheckExistsBarCode(string Barcode, int? BenhNhanid)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spCheckExistsBarCode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@BenhNhan_id", BenhNhanid, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spCheckTestSeq Procedure
        /// </summary>
        public static StoredProcedure SpCheckTestSeq(string pTestSeq, string pTestDate, int? pCount)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spCheckTestSeq", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestSeq", pTestSeq, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.AnsiString, null, null);
        	
            sp.Command.AddOutputParameter("@pCount", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spCreateRegList Procedure
        /// </summary>
        public static StoredProcedure SpCreateRegList(decimal? pTestID, decimal? pDeviceID, string pBarcode, string pAliasName, string pParaName, bool? pSave)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spCreateRegList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestID", pTestID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@pDeviceID", pDeviceID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pAlias_Name", pAliasName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pPara_Name", pParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pSave", pSave, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spD_DeviceList_Delete Procedure
        /// </summary>
        public static StoredProcedure SpDDeviceListDelete(int? pDeviceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spD_DeviceList_Delete", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDeviceID", pDeviceID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spD_DeviceList_Update Procedure
        /// </summary>
        public static StoredProcedure SpDDeviceListUpdate(decimal? pDeviceID, int? pDeviceType, string pDeviceName, int? pDeviceControl, int? pPortID, string pManufacturer, string pDesc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spD_DeviceList_Update", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDeviceID", pDeviceID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@pDeviceType", pDeviceType, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDeviceName", pDeviceName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDeviceControl", pDeviceControl, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pPortID", pPortID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pManufacturer", pManufacturer, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDesc", pDesc, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spDeleteHISLISPatientReg_HongNgoc Procedure
        /// </summary>
        public static StoredProcedure SpDeleteHISLISPatientRegHongNgoc(string pBarcode, int? ErrorCode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spDeleteHISLISPatientReg_HongNgoc", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@ErrorCode", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spDeleteTestInfor Procedure
        /// </summary>
        public static StoredProcedure SpDeleteTestInfor(int? PatientID, DateTime? pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spDeleteTestInfor", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spFillterHongNgocPatient Procedure
        /// </summary>
        public static StoredProcedure SpFillterHongNgocPatient(string pMaYTe, string pTenBenhNhan, DateTime? pTuNgay, DateTime? pDenNgay, int? pStatus, string pBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spFillterHongNgocPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pMaYTe", pMaYTe, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTenBenhNhan", pTenBenhNhan, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTuNgay", pTuNgay, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pDenNgay", pDenNgay, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pStatus", pStatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGet_HIV_HBSII_HCV Procedure
        /// </summary>
        public static StoredProcedure SpGetHivHbsiiHcv(DateTime? FromDate, DateTime? ToDate, short? Sex, string StrTestData)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGet_HIV_HBSII_HCV", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@StrTestData", StrTestData, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGet_Update_Result_HISLISPatientRegDetail Procedure
        /// </summary>
        public static StoredProcedure SpGetUpdateResultHISLISPatientRegDetail(int? pCLSYeuCauId, int? pDichVuId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGet_Update_Result_HISLISPatientRegDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pCLSYeuCau_Id", pCLSYeuCauId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDichVu_Id", pDichVuId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGet2WayDataControl Procedure
        /// </summary>
        public static StoredProcedure SpGet2WayDataControl(int? pDeviceID, int? pTestTypeID, string pTestFrom, string pTestTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGet2WayDataControl", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDeviceID", pDeviceID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestFrom", pTestFrom, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pTestTo", pTestTo, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGet2WayDataControlForVD Procedure
        /// </summary>
        public static StoredProcedure SpGet2WayDataControlForVD(string pDeviceID, int? pTestTypeID, string pTestFrom, string pTestTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGet2WayDataControlForVD", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDeviceID", pDeviceID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestFrom", pTestFrom, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pTestTo", pTestTo, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGet2WayDeviceList Procedure
        /// </summary>
        public static StoredProcedure SpGet2WayDeviceList()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGet2WayDeviceList", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetAllTodayTestResult Procedure
        /// </summary>
        public static StoredProcedure SpGetAllTodayTestResult()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetAllTodayTestResult", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetBarcodeByBenhNhan_Id Procedure
        /// </summary>
        public static StoredProcedure SpGetBarcodeByBenhNhanId(int? BenhNhanId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetBarcodeByBenhNhan_Id", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@BenhNhan_Id", BenhNhanId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetCLSYeuCauByBenNhan_Id Procedure
        /// </summary>
        public static StoredProcedure SpGetCLSYeuCauByBenNhanId(int? BenNhanId, DateTime? pTuNgay, DateTime? pDenNgay, int? pStatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetCLSYeuCauByBenNhan_Id", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@BenNhan_Id", BenNhanId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTuNgay", pTuNgay, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pDenNgay", pDenNgay, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pStatus", pStatus, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetCLSYeuCauChiTietByBenNhan_Id Procedure
        /// </summary>
        public static StoredProcedure SpGetCLSYeuCauChiTietByBenNhanId(int? pCLSYeuCauId, int? pDichVuId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetCLSYeuCauChiTietByBenNhan_Id", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pCLSYeuCau_Id", pCLSYeuCauId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDichVu_Id", pDichVuId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetCorrectBarcode Procedure
        /// </summary>
        public static StoredProcedure SpGetCorrectBarcode(string pTestDate, int? TestTypeID, string PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetCorrectBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetDataControl Procedure
        /// </summary>
        public static StoredProcedure SpGetDataControl()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetDataControl", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetDataControlByDeviceId Procedure
        /// </summary>
        public static StoredProcedure SpGetDataControlByDeviceId(int? pDeviceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetDataControlByDeviceId", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDeviceID", pDeviceID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetDeviceOfTestTypeList Procedure
        /// </summary>
        public static StoredProcedure SpGetDeviceOfTestTypeList(int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetDeviceOfTestTypeList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetIDInfor Procedure
        /// </summary>
        public static StoredProcedure SpGetIDInfor(string pBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetIDInfor", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetMaxBarcode Procedure
        /// </summary>
        public static StoredProcedure SpGetMaxBarcode(string yymmdd)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetMaxBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@yymmdd", yymmdd, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetMaxBarcodeInDay Procedure
        /// </summary>
        public static StoredProcedure SpGetMaxBarcodeInDay(int? MaxBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetMaxBarcodeInDay", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddOutputParameter("@MaxBarcode", DbType.Int32, 0, 10);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetMaxBarcodeV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetMaxBarcodeV2(int? testTypeID, int? patientID, short? allowSameTestTypeInDay, string yymmdd)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetMaxBarcodeV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@testTypeID", testTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@patientID", patientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@allowSameTestTypeInDay", allowSameTestTypeInDay, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@yymmdd", yymmdd, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetNewTestSID Procedure
        /// </summary>
        public static StoredProcedure SpGetNewTestSID(DateTime? datetimeX, int? ParaSystem, int? ParaID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetNewTestSID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@datetime", datetimeX, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ParaSystem", ParaSystem, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Para_ID", ParaID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetParaInfor Procedure
        /// </summary>
        public static StoredProcedure SpGetParaInfor(int? pPortID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetParaInfor", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPortID", pPortID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetPatientForQuickInputResult Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientForQuickInputResult(DateTime? FromDate, DateTime? ToDate, int? TestTypeID, string Barcode, string CanLamSangID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetPatientForQuickInputResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@CanLamSang_ID", CanLamSangID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SpGetPatientInfoAll Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientInfoAll(string pTestDateFrom, string pTestDateTo, string strTestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex, int? ObjectTypeID, int? DepartmentID, string pCanLamSangID, int? vIsFinal, string UserID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SpGetPatientInfoAll", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@strTestType_ID", strTestTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pCanLamSang_ID", pCanLamSangID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@vIsFinal", vIsFinal, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@User_ID", UserID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SpGetPatientInfoAllForPrintingMany Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientInfoAllForPrintingMany(string pTestDateFrom, string pTestDateTo, string strTestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SpGetPatientInfoAllForPrintingMany", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@strTestType_ID", strTestTypeID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the SpGetPatientInfoAllNoResult Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientInfoAllNoResult(string pTestDateFrom, string pTestDateTo, string strTestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex, int? ObjectTypeID, int? DepartmentID, string pCanLamSangID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("SpGetPatientInfoAllNoResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@strTestType_ID", strTestTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pCanLamSang_ID", pCanLamSangID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetPatientInforByBarcodeAndName Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientInforByBarcodeAndName(string pvsPID, string pvsName, int? intSex, int? intObject, DateTime? dtmFrom, DateTime? dtmTo, string Barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetPatientInforByBarcodeAndName", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pv_sPID", pvsPID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pv_sName", pvsName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@intSex", intSex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@intObject", intObject, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@dtmFrom", dtmFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@dtmTo", dtmTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetPatientListByDate Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientListByDate(string pTestDateFrom, string pTestDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetPatientListByDate", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetPatientTest Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientTest(DateTime? pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetPatientTest", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetPatientTestTypeList Procedure
        /// </summary>
        public static StoredProcedure SpGetPatientTestTypeList(string PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetPatientTestTypeList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetPortStatus Procedure
        /// </summary>
        public static StoredProcedure SpGetPortStatus(int? pStatus, string sLocalAlias)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetPortStatus", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pStatus", pStatus, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@sLocalAlias", sLocalAlias, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetPreloadedLists Procedure
        /// </summary>
        public static StoredProcedure SpGetPreloadedLists()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetPreloadedLists", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetRegListByBarcodeAndTestID Procedure
        /// </summary>
        public static StoredProcedure SpGetRegListByBarcodeAndTestID(string Barcode, int? TestId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetRegListByBarcodeAndTestID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestId", TestId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetRegListByBarcodeAndTestType Procedure
        /// </summary>
        public static StoredProcedure SpGetRegListByBarcodeAndTestType(string Barcode, int? TestTypeId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetRegListByBarcodeAndTestType", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestTypeId", TestTypeId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetRegListForService Procedure
        /// </summary>
        public static StoredProcedure SpGetRegListForService(string pBarcode, int? pDeviceId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetRegListForService", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pDeviceId", pDeviceId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetResultDetailByDepartment Procedure
        /// </summary>
        public static StoredProcedure SpGetResultDetailByDepartment(string DateFrom, string DateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetResultDetailByDepartment", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DateFrom", DateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DateTo", DateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetResultDetailByDoctor Procedure
        /// </summary>
        public static StoredProcedure SpGetResultDetailByDoctor(string DateFrom, string DateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetResultDetailByDoctor", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DateFrom", DateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@DateTo", DateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetResultForHongNgocPatient Procedure
        /// </summary>
        public static StoredProcedure SpGetResultForHongNgocPatient(int? pDichVuID, string pBarCode, string pTestResult, string pParaName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetResultForHongNgocPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDichVu_ID", pDichVuID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarCode", pBarCode, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@pTest_Result", DbType.String, null, null);
            
            sp.Command.AddOutputParameter("@pPara_Name", DbType.String, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetResultForHongNgocPatient_TEST Procedure
        /// </summary>
        public static StoredProcedure SpGetResultForHongNgocPatientTest(int? pDichVuID, string pBarCode, string pTestResult, string pParaName)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetResultForHongNgocPatient_TEST", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDichVu_ID", pDichVuID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarCode", pBarCode, DbType.String, null, null);
        	
            sp.Command.AddOutputParameter("@pTest_Result", DbType.String, null, null);
            
            sp.Command.AddOutputParameter("@pPara_Name", DbType.String, null, null);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetResultForUpdatePatientInfo Procedure
        /// </summary>
        public static StoredProcedure SpGetResultForUpdatePatientInfo(DateTime? FromDate, DateTime? ToDate, string strTestTypeID, int? DeviceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetResultForUpdatePatientInfo", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@strTestType_ID", strTestTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Device_ID", DeviceID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetSeriesOfBarcode Procedure
        /// </summary>
        public static StoredProcedure SpGetSeriesOfBarcode(string pTestDateFrom, string pTestDateTo, int? TestTypeID, string PID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetSeriesOfBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestDayOfPatient Procedure
        /// </summary>
        public static StoredProcedure SpGetTestDayOfPatient(string pTestDateFrom, string pTestDateTo, int? TestTypeID, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestDayOfPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestDetailInforForPatient_XN Procedure
        /// </summary>
        public static StoredProcedure SpGetTestDetailInforForPatientXn(int? pPatientID, int? TestTypeID, DateTime? pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestDetailInforForPatient_XN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatient_ID", pPatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestDetailInforForPatient_XNV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestDetailInforForPatientXNV2(int? pPatientID, int? TestTypeID, string pTestDateFrom, string pTestDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestDetailInforForPatient_XNV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatient_ID", pPatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestGroupByDeviceID Procedure
        /// </summary>
        public static StoredProcedure SpGetTestGroupByDeviceID(int? pDeviceID, int? pTestGroupID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestGroupByDeviceID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDevice_ID", pDeviceID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestGroup_ID", pTestGroupID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInfoByPatientForPrintingManyIDV3 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInfoByPatientForPrintingManyIDV3(string patientId, string testTypeId, DateTime? pTestDateFrom, DateTime? pTestDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInfoByPatientForPrintingManyIDV3", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@patientId", patientId, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@testTypeId", testTypeId, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInfoByPatientIDV3 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInfoByPatientIDV3(int? patientId, string testTypeId, DateTime? pTestDateFrom, DateTime? pTestDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInfoByPatientIDV3", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@patientId", patientId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@testTypeId", testTypeId, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInfoGroupBySID Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInfoGroupBySID(string pTestDateFrom, string pTestDateTo, string strTestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex, string strTestStatus)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInfoGroupBySID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@strTestType_ID", strTestTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@strTestStatus", strTestStatus, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInfoGroupBySID_V2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInfoGroupBySIDV2(string pTestDateFrom, string pTestDateTo, string strTestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInfoGroupBySID_V2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@strTestType_ID", strTestTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatient(DateTime? pTestDate, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_New Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientNew(string pTestDateFrom, string pTestDateTo, string TestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex, int? HasTest)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_New", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasTest", HasTest, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_XN Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientXn(DateTime? pTestDate, int? TestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex, int? HasTest)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_XN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasTest", HasTest, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_XN_QuickInput Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientXnQuickInput(string pTestDate, int? TestTypeID, string PID, string PatientName, int? Age, int? Sex)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_XN_QuickInput", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_XN_QuickInputV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientXnQuickInputV2(string pTestDate, int? TestTypeID, string PID, string PatientName, int? Age, int? Sex, int? HasTest, bool? pcheck)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_XN_QuickInputV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasTest", HasTest, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pcheck", pcheck, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_XN_QuickInputV3 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientXnQuickInputV3(string pTestDate, int? TestTypeID, string PID, string PatientName, int? Age, int? Sex, int? HasTest, bool? pcheck)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_XN_QuickInputV3", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasTest", HasTest, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pcheck", pcheck, DbType.Boolean, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_XNV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientXNV2(string pTestDateFrom, string pTestDateTo, int? TestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex, int? HasTest)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_XNV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasTest", HasTest, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_XNV2_NEW Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientXNV2New(string pTestDateFrom, string pTestDateTo, string TestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex, int? HasTest)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_XNV2_NEW", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@HasTest", HasTest, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestInforForPatient_XNV3 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestInforForPatientXNV3(string pTestDateFrom, string pTestDateTo, string strTestTypeID, string Barcode, string PID, string PatientName, int? Age, int? Sex)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestInforForPatient_XNV3", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@strTestType_ID", strTestTypeID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PID", PID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_Name", PatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Age", Age, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Sex", Sex, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestResultForPrintV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestResultForPrintV2(int? PatientID, string TestTypeID, string TestId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestResultForPrintV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@TestId", TestId, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestTypeandTReglist Procedure
        /// </summary>
        public static StoredProcedure SpGetTestTypeandTReglist(int? pPatientId, string pDateFrom, string pDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestTypeandTReglist", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatientId", pPatientId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDateFrom", pDateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDateTo", pDateTo, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestTypeandTReglistV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestTypeandTReglistV2(int? pPatientId, DateTime? pDateFrom, DateTime? pDateTo)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestTypeandTReglistV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatientId", pPatientId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDateFrom", pDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pDateTo", pDateTo, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestTypeByPatient Procedure
        /// </summary>
        public static StoredProcedure SpGetTestTypeByPatient(int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestTypeByPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestTypeIDOfPatient Procedure
        /// </summary>
        public static StoredProcedure SpGetTestTypeIDOfPatient(DateTime? Testdate, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestTypeIDOfPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_date", Testdate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestTypeIDOfPatientV2 Procedure
        /// </summary>
        public static StoredProcedure SpGetTestTypeIDOfPatientV2(string TestdateFrom, string TestdateTo, int? PatientID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestTypeIDOfPatientV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_dateFrom", TestdateFrom, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Test_dateTo", TestdateTo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@PatientID", PatientID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spGetTestTypeListFromDateToDateForPatient_NEW Procedure
        /// </summary>
        public static StoredProcedure SpGetTestTypeListFromDateToDateForPatientNew(decimal? patientID, string testtypeid, DateTime? fromdate, DateTime? todate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spGetTestTypeListFromDateToDateForPatient_NEW", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@patientID", patientID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@testtypeid", testtypeid, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@fromdate", fromdate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@todate", todate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatient Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatient(string pMaBN, string pHoTen, string Tuoi, string pGioiTinh, string pSoPhong, string pSoGiuong, string pNgayTraKetQua, string pBacSyChuyenKhoa, string pKhoa, string pDoiTuong, string pChanDoan, string pLoaiChiDinh, string pSoPhieuChiDinh, string pTenPhieuXetNghiem, string pNgayChiDinh, string pBacSiChiDinh, string pDaTra, string pNhanXet)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatient", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pMaBN", pMaBN, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pHoTen", pHoTen, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Tuoi", Tuoi, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pGioiTinh", pGioiTinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pSoPhong", pSoPhong, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pSoGiuong", pSoGiuong, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNgayTraKetQua", pNgayTraKetQua, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pBacSyChuyenKhoa", pBacSyChuyenKhoa, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pKhoa", pKhoa, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDoiTuong", pDoiTuong, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pChanDoan", pChanDoan, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pLoaiChiDinh", pLoaiChiDinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pSoPhieuChiDinh", pSoPhieuChiDinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTenPhieuXetNghiem", pTenPhieuXetNghiem, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNgayChiDinh", pNgayChiDinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pBacSiChiDinh", pBacSiChiDinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDaTra", pDaTra, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNhanXet", pNhanXet, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatient_Hathang Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatientHathang(string pPatientID, string pPatientName, string pPatientaddr, string pObjectType, string pObjectNAMES, string pTENPK, string pNGAYSINH, string pTUOI, string pSex, string pRegDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatient_Hathang", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatient_ID", pPatientID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pPatient_Name", pPatientName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pPatient_addr", pPatientaddr, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pObject_Type", pObjectType, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pObject_NAMES", pObjectNAMES, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTENPK", pTENPK, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNGAYSINH", pNGAYSINH, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTUOI", pTUOI, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pSex", pSex, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pReg_Date", pRegDate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatientInfo_HongNgoc Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatientInfoHongNgoc(string pBenhNhanId, string pMaYTe, string pTenBenhNhan, int? pNamSinh, DateTime? pNgaySinh, string pDiaChi, string pGioiTinh)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatientInfo_HongNgoc", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBenhNhan_Id", pBenhNhanId, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMaYTe", pMaYTe, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTenBenhNhan", pTenBenhNhan, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNamSinh", pNamSinh, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pNgaySinh", pNgaySinh, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pDiaChi", pDiaChi, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pGioiTinh", pGioiTinh, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatientReg_HongNgoc Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatientRegHongNgoc(string pBenhNhanId, int? pNhomDichVuId, int? pDichVuId, string pTenDichVu, string pTrangThai, int? pCLSYeuCauId, DateTime? pNgayYeuCau, string pBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatientReg_HongNgoc", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBenhNhan_Id", pBenhNhanId, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNhomDichVu_Id", pNhomDichVuId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDichVu_Id", pDichVuId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTenDichVu", pTenDichVu, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTrangThai", pTrangThai, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pCLSYeuCau_Id", pCLSYeuCauId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pNgayYeuCau", pNgayYeuCau, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatientRegDetail_HongNgoc Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatientRegDetailHongNgoc(int? pNhomDichVuId, string pTenNhomDichVu, int? pDichVuId, string pMaDichVu, string pTenDichVu, string pMaTat, int? pCLSYeuCauId, int? pDichVuLevel, int? pDichvuIDFillter, short? pStatus, string pBarcode, string pGiaTriChuan, string pDonViTinh)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatientRegDetail_HongNgoc", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pNhomDichVu_Id", pNhomDichVuId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTenNhomDichVu", pTenNhomDichVu, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDichVu_Id", pDichVuId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pMaDichVu", pMaDichVu, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTenDichVu", pTenDichVu, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMaTat", pMaTat, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pCLSYeuCau_Id", pCLSYeuCauId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDichVuLevel", pDichVuLevel, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDichvu_ID_Fillter", pDichvuIDFillter, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pStatus", pStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pGiaTriChuan", pGiaTriChuan, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDonViTinh", pDonViTinh, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatientRegDetail_HongNgoc_UpdateCLSKetQuaChiTietID Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatientRegDetailHongNgocUpdateCLSKetQuaChiTietID(int? pDichVuId, int? pCLSYeuCauId, int? pCLSKetQuaChiTietId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatientRegDetail_HongNgoc_UpdateCLSKetQuaChiTietID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDichVu_Id", pDichVuId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pCLSYeuCau_Id", pCLSYeuCauId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pCLSKetQuaChiTiet_Id", pCLSKetQuaChiTietId, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatientRegDetail_HongNgoc_UpdateCLSKetQuaID Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatientRegDetailHongNgocUpdateCLSKetQuaID(int? pCLSYeuCauId, int? pCLSKetQuaId, int? pDichvuID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatientRegDetail_HongNgoc_UpdateCLSKetQuaID", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pCLSYeuCau_Id", pCLSYeuCauId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pCLSKetQua_Id", pCLSKetQuaId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pDichvu_ID", pDichvuID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISPatientRegDetail_HongNgoc_UpdateResult Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISPatientRegDetailHongNgocUpdateResult(int? pDichVuId, string pBarcode, string pKetQua, short? pStatus, string pLISParaname, string pGiaTriChuan, string pDonViTinh)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISPatientRegDetail_HongNgoc_UpdateResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pDichVu_Id", pDichVuId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pKetQua", pKetQua, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pStatus", pStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@pLISParaname", pLISParaname, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pGiaTriChuan", pGiaTriChuan, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDonViTinh", pDonViTinh, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISReg Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISReg(string pSoPhieuChiDinh, string pIDXetNghiemHIS, string IDTriSoHIS, string pIDChiDinhChiTiet, string pTenXetNghiemTriSo, string pLaTriSo, string pTriSoBinhThuong, string pKetQua, string pNhanXet)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISReg", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pSoPhieuChiDinh", pSoPhieuChiDinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pIDXetNghiem_HIS", pIDXetNghiemHIS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IDTriSo_HIS", IDTriSoHIS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pIDChiDinhChiTiet", pIDChiDinhChiTiet, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTenXetNghiem_TriSo", pTenXetNghiemTriSo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pLaTriSo", pLaTriSo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTriSoBinhThuong", pTriSoBinhThuong, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pKetQua", pKetQua, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNhanXet", pNhanXet, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISReg_Hathang Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISRegHathang(string pPatientID, string pID, string pMaDV, string pMADVCS, string pMACS, string pTENDV, string pTENLH, string pMALH, string pBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISReg_Hathang", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatient_ID", pPatientID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pID", pID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMaDV", pMaDV, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMADVCS", pMADVCS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMACS", pMACS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTENDV", pTENDV, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTENLH", pTENLH, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMALH", pMALH, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISReg_Hathang_UpdateBarcode Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISRegHathangUpdateBarcode(string pID, string pMaDV, string pMADVCS, string pBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISReg_Hathang_UpdateBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pID", pID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMaDV", pMaDV, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMADVCS", pMADVCS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISReg_Hathang_UpdateResult Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISRegHathangUpdateResult(string pID, string pBarcode, string pMACS, string pResult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISReg_Hathang_UpdateResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pID", pID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMACS", pMACS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pResult", pResult, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISReg_UpdateBarcode Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISRegUpdateBarcode(string pSoPhieuChiDinh, string pIDXetNghiemHIS, string barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISReg_UpdateBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pSoPhieuChiDinh", pSoPhieuChiDinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pIDXetNghiem_HIS", pIDXetNghiemHIS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertHISLISReg_UpdateResult Procedure
        /// </summary>
        public static StoredProcedure SpInsertHISLISRegUpdateResult(string pSoPhieuChiDinh, string pIDXetNghiemHIS, string IDTriSoHIS, string pIDChiDinhChiTiet, string pTenXetNghiemTriSo, string pLaTriSo, string pTriSoBinhThuong, string pKetQua, string pNhanXet, string pBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertHISLISReg_UpdateResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pSoPhieuChiDinh", pSoPhieuChiDinh, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pIDXetNghiem_HIS", pIDXetNghiemHIS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IDTriSo_HIS", IDTriSoHIS, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pIDChiDinhChiTiet", pIDChiDinhChiTiet, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTenXetNghiem_TriSo", pTenXetNghiemTriSo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pLaTriSo", pLaTriSo, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTriSoBinhThuong", pTriSoBinhThuong, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pKetQua", pKetQua, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNhanXet", pNhanXet, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertMultiResultDetail Procedure
        /// </summary>
        public static StoredProcedure SpInsertMultiResultDetail(int? TestTypeID, string pBarcode, string pStrResult, int? DeviceID, int? AutoGeneratePatient)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertMultiResultDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pStrResult", pStrResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Device_ID", DeviceID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@AutoGeneratePatient", AutoGeneratePatient, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertTestInfo_Ver2 Procedure
        /// </summary>
        public static StoredProcedure SpInsertTestInfoVer2(short? TestTypeID, int? PatientID, string Barcode, DateTime? TestDate, short? TestStatus, decimal? DeviceID, decimal? TestId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertTestInfo_Ver2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestStatus", TestStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Device_ID", DeviceID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddOutputParameter("@TestId", DbType.Decimal, 0, 18);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertTestResult Procedure
        /// </summary>
        public static StoredProcedure SpInsertTestResult(long? pTESTID, long? pPATIENTID, int? pTestTypeID, string pTestDate, string pTestSeq, int? pDataSeq, string pBarcode, string pParaName, string pTestResult, string pMeasureUnit, string pNormalLevel, string pNormalLevelW)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertTestResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTEST_ID", pTESTID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pPATIENT_ID", pPATIENTID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestSeq", pTestSeq, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDataSeq", pDataSeq, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pParaName", pParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestResult", pTestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMeasureUnit", pMeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNormalLevel", pNormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNormalLevelW", pNormalLevelW, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertTestResult_DELETE Procedure
        /// </summary>
        public static StoredProcedure SpInsertTestResultDelete(long? pTestDetailID, long? pTESTID, long? pPATIENTID, int? pTestTypeID, string pTestDate, string pTestSeq, int? pDataSeq, string pBarcode, string pParaName, string pTestResult, string pMeasureUnit, string pNormalLevel, string pNormalLevelW)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertTestResult_DELETE", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDetail_ID", pTestDetailID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pTEST_ID", pTESTID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pPATIENT_ID", pPATIENTID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestSeq", pTestSeq, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDataSeq", pDataSeq, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pParaName", pParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestResult", pTestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMeasureUnit", pMeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNormalLevel", pNormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNormalLevelW", pNormalLevelW, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spInsertUpdateTestResult Procedure
        /// </summary>
        public static StoredProcedure SpInsertUpdateTestResult(long? pTESTID, long? pPATIENTID, int? pTestTypeID, string pTestDate, string pTestSeq, int? pDataSeq, string pBarcode, string pParaName, string pTestResult, string pMeasureUnit, string pNormalLevel, string pNormalLevelW, int? pPortNum)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spInsertUpdateTestResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTEST_ID", pTESTID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pPATIENT_ID", pPATIENTID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestSeq", pTestSeq, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDataSeq", pDataSeq, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pParaName", pParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestResult", pTestResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMeasureUnit", pMeasureUnit, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNormalLevel", pNormalLevel, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pNormalLevelW", pNormalLevelW, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pPortNum", pPortNum, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spMakeBarcode Procedure
        /// </summary>
        public static StoredProcedure SpMakeBarcode(int? SoBatDau, int? SoKetThuc)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spMakeBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@SoBatDau", SoBatDau, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@SoKetThuc", SoKetThuc, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spQuickInputDetail Procedure
        /// </summary>
        public static StoredProcedure SpQuickInputDetail(int? pPatientID, int? TestTypeID, DateTime? pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spQuickInputDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatient_ID", pPatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spQuickInputDetail_CorrectVersion Procedure
        /// </summary>
        public static StoredProcedure SpQuickInputDetailCorrectVersion(int? pPatientID, int? TestTypeID, string pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spQuickInputDetail_CorrectVersion", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatient_ID", pPatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spQuickInputDetail_CorrectVersionJCLV Procedure
        /// </summary>
        public static StoredProcedure SpQuickInputDetailCorrectVersionJCLV(int? pPatientID, int? TestTypeID, string pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spQuickInputDetail_CorrectVersionJCLV", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pPatient_ID", pPatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spRemoveTest Procedure
        /// </summary>
        public static StoredProcedure SpRemoveTest(int? NewTESTID, int? oldTESTID, int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spRemoveTest", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@NewTEST_ID", NewTESTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@oldTEST_ID", oldTESTID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spSoGhiChep Procedure
        /// </summary>
        public static StoredProcedure SpSoGhiChep(DateTime? pFromDate, DateTime? pToDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spSoGhiChep", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromDate", pFromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pToDate", pToDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spTvMonitor Procedure
        /// </summary>
        public static StoredProcedure SpTvMonitor(DateTime? DateX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spTvMonitor", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Date", DateX, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdateBenhNhan_Id Procedure
        /// </summary>
        public static StoredProcedure SpUpdateBenhNhanId(int? pBenhNhanId, string pBarcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdateBenhNhan_Id", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBenhNhan_Id", pBenhNhanId, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdateParaMapping Procedure
        /// </summary>
        public static StoredProcedure SpUpdateParaMapping(string pMedParamID, string pMedParaName, string pLisParaName, string pDeviceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdateParaMapping", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pMed_ParamID", pMedParamID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pMed_ParaName", pMedParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pLis_ParaName", pLisParaName, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pDevice_ID", pDeviceID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdatePrintStatus Procedure
        /// </summary>
        public static StoredProcedure SpUpdatePrintStatus(string strTestId)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdatePrintStatus", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@strTestId", strTestId, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdateRegTestList Procedure
        /// </summary>
        public static StoredProcedure SpUpdateRegTestList(string pBarcode, string pParaName, long? pTestID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdateRegTestList", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pParaName", pParaName, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@pTestID", pTestID, DbType.Int64, 0, 19);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdateResultDetail Procedure
        /// </summary>
        public static StoredProcedure SpUpdateResultDetail(int? OldTestID, int? PatientID, int? NewTestID, int? pTestTypeID, string Barcode, DateTime? pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdateResultDetail", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@OldTest_ID", OldTestID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@NewTest_ID", NewTestID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdateResultDetailV2 Procedure
        /// </summary>
        public static StoredProcedure SpUpdateResultDetailV2(int? OldTestID, int? PatientID, int? NewTestID, int? pTestTypeID, string Barcode, string pTestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdateResultDetailV2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@OldTest_ID", OldTestID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@NewTest_ID", NewTestID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@pTestType_ID", pTestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestDate", pTestDate, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdateTestInfo_Ver2 Procedure
        /// </summary>
        public static StoredProcedure SpUpdateTestInfoVer2(short? TestTypeID, int? PatientID, string Barcode, DateTime? TestDate, short? TestStatus, decimal? DeviceID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdateTestInfo_Ver2", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Barcode", Barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Test_Date", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestStatus", TestStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Device_ID", DeviceID, DbType.Decimal, 0, 18);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the spUpdateTestResult Procedure
        /// </summary>
        public static StoredProcedure SpUpdateTestResult(long? pTestDetailID, string pBarcode, string pTestResult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("spUpdateTestResult", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDetail_ID", pTestDetailID, DbType.Int64, 0, 19);
        	
            sp.Command.AddParameter("@pBarcode", pBarcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@pTestResult", pTestResult, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sys_getroles Procedure
        /// </summary>
        public static StoredProcedure SysGetroles(string UID, int? IsAdmin, string MaDonvi)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sys_getroles", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@UID", UID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@IsAdmin", IsAdmin, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@MaDonvi", MaDonvi, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the sys_getVersions Procedure
        /// </summary>
        public static StoredProcedure SysGetVersions()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("sys_getVersions", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the T_Test_Content_DELETE Procedure
        /// </summary>
        public static StoredProcedure TTestContentDelete(decimal? TestID, string LISTTestType)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("T_Test_Content_DELETE", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@LIST_TestType", LISTTestType, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the T_Test_Info_Delete Procedure
        /// </summary>
        public static StoredProcedure TTestInfoDelete(decimal? TestID, string barcode)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("T_Test_Info_Delete", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the T_TEST_INFO_GET Procedure
        /// </summary>
        public static StoredProcedure TTestInfoGet(DateTime? TestDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("T_TEST_INFO_GET", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the T_Test_Info_Insert Procedure
        /// </summary>
        public static StoredProcedure TTestInfoInsert(string barcode, int? PatientID, DateTime? TestDate, DateTime? RequireDate, int? AssignID, int? DiagnosID, int? ReceiveID, short? TestStatus, int? UpdateUser, decimal? TESTID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("T_Test_Info_Insert", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@RequireDate", RequireDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@AssignID", AssignID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DiagnosID", DiagnosID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ReceiveID", ReceiveID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestStatus", TestStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@UpdateUser", UpdateUser, DbType.Int32, 0, 10);
        	
            sp.Command.AddOutputParameter("@TEST_ID", DbType.Decimal, 0, 18);
            
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the T_Test_Info_Insert_DELETE Procedure
        /// </summary>
        public static StoredProcedure TTestInfoInsertDelete(decimal? TESTID, string barcode, int? PatientID, DateTime? TestDate, DateTime? RequireDate, int? AssignID, int? DiagnosID, int? ReceiveID, short? TestStatus, int? UpdateUser)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("T_Test_Info_Insert_DELETE", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TEST_ID", TESTID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@RequireDate", RequireDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@AssignID", AssignID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DiagnosID", DiagnosID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ReceiveID", ReceiveID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestStatus", TestStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@UpdateUser", UpdateUser, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the T_Test_Info_Update Procedure
        /// </summary>
        public static StoredProcedure TTestInfoUpdate(decimal? TestID, string barcode, int? PatientID, DateTime? TestDate, DateTime? RequireDate, int? AssignID, int? DiagnosID, int? ReceiveID, short? TestStatus, string DiagResult, int? UpdateUser)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("T_Test_Info_Update", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@barcode", barcode, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestDate", TestDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@RequireDate", RequireDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@AssignID", AssignID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DiagnosID", DiagnosID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@ReceiveID", ReceiveID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestStatus", TestStatus, DbType.Int16, 0, 5);
        	
            sp.Command.AddParameter("@Diag_Result", DiagResult, DbType.String, null, null);
        	
            sp.Command.AddParameter("@UpdateUser", UpdateUser, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the T_TEST_TYPE_LIST_GET Procedure
        /// </summary>
        public static StoredProcedure TTestTypeListGet(int? TestTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("T_TEST_TYPE_LIST_GET", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the THAIHA_BAOCAO_SLUONG_LOAI_XN Procedure
        /// </summary>
        public static StoredProcedure ThaihaBaocaoSluongLoaiXn(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeID, int? TestTypeID, int? NoiTru, int? DepartmentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("THAIHA_BAOCAO_SLUONG_LOAI_XN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@NoiTru", NoiTru, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the THAIHA_GetMaxBarcode Procedure
        /// </summary>
        public static StoredProcedure ThaihaGetMaxBarcode(string DateTimeX)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("THAIHA_GetMaxBarcode", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@DateTime", DateTimeX, DbType.AnsiString, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the ThaiThinh_GetLabPatientInfo Procedure
        /// </summary>
        public static StoredProcedure ThaiThinhGetLabPatientInfo(string soPhieu)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("ThaiThinh_GetLabPatientInfo", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@soPhieu", soPhieu, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the TUNG_Update Procedure
        /// </summary>
        public static StoredProcedure TungUpdate()
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("TUNG_Update", DataService.GetInstance("ORM"), "");
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the UPDATE_Count_PatientInfo_TestInfo Procedure
        /// </summary>
        public static StoredProcedure UpdateCountPatientInfoTestInfo(decimal? TestDetailID, short? RegHasResult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("UPDATE_Count_PatientInfo_TestInfo", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestDetail_ID", TestDetailID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@Reg_Has_Result", RegHasResult, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the UPDATE_Count_PatientInfo_TestInfo_New Procedure
        /// </summary>
        public static StoredProcedure UpdateCountPatientInfoTestInfoNew(decimal? PatientID, decimal? TestID, string TestDataID, short? RegHasResult)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("UPDATE_Count_PatientInfo_TestInfo_New", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@Patient_ID", PatientID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@Test_ID", TestID, DbType.Decimal, 0, 18);
        	
            sp.Command.AddParameter("@TestData_ID", TestDataID, DbType.String, null, null);
        	
            sp.Command.AddParameter("@Reg_Has_Result", RegHasResult, DbType.Int16, 0, 5);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the Update_Is_Normal_Result Procedure
        /// </summary>
        public static StoredProcedure UpdateIsNormalResult(decimal? TestDetailID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("Update_Is_Normal_Result", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@TestDetail_ID", TestDetailID, DbType.Decimal, 0, 18);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the VIENMAT_BAOCAO_XN_TONGHOP Procedure
        /// </summary>
        public static StoredProcedure VienmatBaocaoXnTonghop(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? noitru, string dichvu, string testTypeId, string ReportTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("VIENMAT_BAOCAO_XN_TONGHOP", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@noitru", noitru, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@dichvu", dichvu, DbType.AnsiString, null, null);
        	
            sp.Command.AddParameter("@testTypeId", testTypeId, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ReportType_ID", ReportTypeID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the VIENMAT_BAOCAO_XN_TONGHOP_1 Procedure
        /// </summary>
        public static StoredProcedure VienmatBaocaoXnTonghop1(DateTime? pTestDateFrom, DateTime? pTestDateTo, int? noitru, int? dichvu, string testTypeId, string ReportTypeID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("VIENMAT_BAOCAO_XN_TONGHOP_1", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pTestDateFrom", pTestDateFrom, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pTestDateTo", pTestDateTo, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@noitru", noitru, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@dichvu", dichvu, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@testTypeId", testTypeId, DbType.String, null, null);
        	
            sp.Command.AddParameter("@ReportType_ID", ReportTypeID, DbType.String, null, null);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the XAYDUNG_BAOCAO_SLUONG_BNHAN Procedure
        /// </summary>
        public static StoredProcedure XaydungBaocaoSluongBnhan(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeID, int? TestTypeID, int? NoiTru, int? TrangThai, int? DepartmentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("XAYDUNG_BAOCAO_SLUONG_BNHAN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@NoiTru", NoiTru, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TrangThai", TrangThai, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the XAYDUNG_BAOCAO_SLUONG_LOAI_XN Procedure
        /// </summary>
        public static StoredProcedure XaydungBaocaoSluongLoaiXn(DateTime? FromDate, DateTime? ToDate, int? ObjectTypeID, int? TestTypeID, int? NoiTru, int? DepartmentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("XAYDUNG_BAOCAO_SLUONG_LOAI_XN", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ObjectType_ID", ObjectTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@TestType_ID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@NoiTru", NoiTru, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@Department_ID", DepartmentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the XAYDUNG_GETTEST_HISLIS Procedure
        /// </summary>
        public static StoredProcedure XaydungGettestHislis(DateTime? FromDate, DateTime? ToDate, int? TestTypeID, int? DeparmentID)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("XAYDUNG_GETTEST_HISLIS", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@FromDate", FromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@ToDate", ToDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@TestTypeID", TestTypeID, DbType.Int32, 0, 10);
        	
            sp.Command.AddParameter("@DeparmentID", DeparmentID, DbType.Int32, 0, 10);
        	
            return sp;
        }
        
        /// <summary>
        /// Creates an object wrapper for the YHHQ_BaoCaoXetNghiemTheoThang Procedure
        /// </summary>
        public static StoredProcedure YhhqBaoCaoXetNghiemTheoThang(DateTime? pFromDate, DateTime? pToDate)
        {
            SubSonic.StoredProcedure sp = new SubSonic.StoredProcedure("YHHQ_BaoCaoXetNghiemTheoThang", DataService.GetInstance("ORM"), "dbo");
        	
            sp.Command.AddParameter("@pFromDate", pFromDate, DbType.DateTime, null, null);
        	
            sp.Command.AddParameter("@pToDate", pToDate, DbType.DateTime, null, null);
        	
            return sp;
        }
        
    }
    
}
