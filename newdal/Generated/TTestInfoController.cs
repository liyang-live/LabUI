using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace LIS.DAL
{
    /// <summary>
    /// Controller class for T_TEST_INFO
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class TTestInfoController
    {
        // Preload our schema..
        TTestInfo thisSchemaLoad = new TTestInfo();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public TTestInfoCollection FetchAll()
        {
            TTestInfoCollection coll = new TTestInfoCollection();
            Query qry = new Query(TTestInfo.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public TTestInfoCollection FetchByID(object TestId)
        {
            TTestInfoCollection coll = new TTestInfoCollection().Where("Test_ID", TestId).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public TTestInfoCollection FetchByQuery(Query qry)
        {
            TTestInfoCollection coll = new TTestInfoCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object TestId)
        {
            return (TTestInfo.Delete(TestId) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object TestId)
        {
            return (TTestInfo.Destroy(TestId) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(decimal? TestTypeId,string Barcode,string TestSeq,decimal? PatientId,DateTime? TestDate,DateTime? RequireDate,decimal? AssignId,decimal? DiagnosticianId,string ReceiverId,short? TestStatus,string DiagResult,string UpdateUser,DateTime? UpdateDate,string Lam,string CanLamSangId,decimal? DeviceId,int? PrintStatus,int? ResultCount,int? RegCount,int? RegNoResultCount,int? SentStatus)
	    {
		    TTestInfo item = new TTestInfo();
		    
            item.TestTypeId = TestTypeId;
            
            item.Barcode = Barcode;
            
            item.TestSeq = TestSeq;
            
            item.PatientId = PatientId;
            
            item.TestDate = TestDate;
            
            item.RequireDate = RequireDate;
            
            item.AssignId = AssignId;
            
            item.DiagnosticianId = DiagnosticianId;
            
            item.ReceiverId = ReceiverId;
            
            item.TestStatus = TestStatus;
            
            item.DiagResult = DiagResult;
            
            item.UpdateUser = UpdateUser;
            
            item.UpdateDate = UpdateDate;
            
            item.Lam = Lam;
            
            item.CanLamSangId = CanLamSangId;
            
            item.DeviceId = DeviceId;
            
            item.PrintStatus = PrintStatus;
            
            item.ResultCount = ResultCount;
            
            item.RegCount = RegCount;
            
            item.RegNoResultCount = RegNoResultCount;
            
            item.SentStatus = SentStatus;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(decimal TestId,decimal? TestTypeId,string Barcode,string TestSeq,decimal? PatientId,DateTime? TestDate,DateTime? RequireDate,decimal? AssignId,decimal? DiagnosticianId,string ReceiverId,short? TestStatus,string DiagResult,string UpdateUser,DateTime? UpdateDate,string Lam,string CanLamSangId,decimal? DeviceId,int? PrintStatus,int? ResultCount,int? RegCount,int? RegNoResultCount,int? SentStatus)
	    {
		    TTestInfo item = new TTestInfo();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.TestId = TestId;
				
			item.TestTypeId = TestTypeId;
				
			item.Barcode = Barcode;
				
			item.TestSeq = TestSeq;
				
			item.PatientId = PatientId;
				
			item.TestDate = TestDate;
				
			item.RequireDate = RequireDate;
				
			item.AssignId = AssignId;
				
			item.DiagnosticianId = DiagnosticianId;
				
			item.ReceiverId = ReceiverId;
				
			item.TestStatus = TestStatus;
				
			item.DiagResult = DiagResult;
				
			item.UpdateUser = UpdateUser;
				
			item.UpdateDate = UpdateDate;
				
			item.Lam = Lam;
				
			item.CanLamSangId = CanLamSangId;
				
			item.DeviceId = DeviceId;
				
			item.PrintStatus = PrintStatus;
				
			item.ResultCount = ResultCount;
				
			item.RegCount = RegCount;
				
			item.RegNoResultCount = RegNoResultCount;
				
			item.SentStatus = SentStatus;
				
	        item.Save(UserName);
	    }
    }
}
